// Code generated by goctl. DO NOT EDIT.
// Source: book.proto

package bookservice

import (
	"context"

	"rpc/types/book"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BookReq = book.BookReq
	BookRes = book.BookRes
	Books   = book.Books
	PageReq = book.PageReq
	PageRes = book.PageRes
	Res     = book.Res

	BookService interface {
		GetBook(ctx context.Context, in *BookReq, opts ...grpc.CallOption) (*BookRes, error)
		GetPage(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*PageRes, error)
		DelBook(ctx context.Context, in *BookReq, opts ...grpc.CallOption) (*Res, error)
		AlterBook(ctx context.Context, in *BookRes, opts ...grpc.CallOption) (*Res, error)
		AddBook(ctx context.Context, in *BookRes, opts ...grpc.CallOption) (*Res, error)
		GetBookByName(ctx context.Context, in *BookRes, opts ...grpc.CallOption) (*Books, error)
		GetBookByAuthor(ctx context.Context, in *BookRes, opts ...grpc.CallOption) (*Books, error)
	}

	defaultBookService struct {
		cli zrpc.Client
	}
)

func NewBookService(cli zrpc.Client) BookService {
	return &defaultBookService{
		cli: cli,
	}
}

func (m *defaultBookService) GetBook(ctx context.Context, in *BookReq, opts ...grpc.CallOption) (*BookRes, error) {
	client := book.NewBookServiceClient(m.cli.Conn())
	return client.GetBook(ctx, in, opts...)
}

func (m *defaultBookService) GetPage(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*PageRes, error) {
	client := book.NewBookServiceClient(m.cli.Conn())
	return client.GetPage(ctx, in, opts...)
}

func (m *defaultBookService) DelBook(ctx context.Context, in *BookReq, opts ...grpc.CallOption) (*Res, error) {
	client := book.NewBookServiceClient(m.cli.Conn())
	return client.DelBook(ctx, in, opts...)
}

func (m *defaultBookService) AlterBook(ctx context.Context, in *BookRes, opts ...grpc.CallOption) (*Res, error) {
	client := book.NewBookServiceClient(m.cli.Conn())
	return client.AlterBook(ctx, in, opts...)
}

func (m *defaultBookService) AddBook(ctx context.Context, in *BookRes, opts ...grpc.CallOption) (*Res, error) {
	client := book.NewBookServiceClient(m.cli.Conn())
	return client.AddBook(ctx, in, opts...)
}

func (m *defaultBookService) GetBookByName(ctx context.Context, in *BookRes, opts ...grpc.CallOption) (*Books, error) {
	client := book.NewBookServiceClient(m.cli.Conn())
	return client.GetBookByName(ctx, in, opts...)
}

func (m *defaultBookService) GetBookByAuthor(ctx context.Context, in *BookRes, opts ...grpc.CallOption) (*Books, error) {
	client := book.NewBookServiceClient(m.cli.Conn())
	return client.GetBookByAuthor(ctx, in, opts...)
}
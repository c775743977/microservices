// Code generated by goctl. DO NOT EDIT.
// Source: book.proto

package server

import (
	"context"

	"book/rpc/new/internal/logic"
	"book/rpc/new/internal/svc"
	"book/rpc/new/types/book"
)

type BookServiceServer struct {
	svcCtx *svc.ServiceContext
	book.UnimplementedBookServiceServer
}

func NewBookServiceServer(svcCtx *svc.ServiceContext) *BookServiceServer {
	return &BookServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *BookServiceServer) GetBook(ctx context.Context, in *book.BookReq) (*book.BookRes, error) {
	l := logic.NewGetBookLogic(ctx, s.svcCtx)
	return l.GetBook(in)
}

func (s *BookServiceServer) GetPage(ctx context.Context, in *book.PageReq) (*book.PageRes, error) {
	l := logic.NewGetPageLogic(ctx, s.svcCtx)
	return l.GetPage(in)
}

func (s *BookServiceServer) DelBook(ctx context.Context, in *book.BookReq) (*book.Res, error) {
	l := logic.NewDelBookLogic(ctx, s.svcCtx)
	return l.DelBook(in)
}

func (s *BookServiceServer) AlterBook(ctx context.Context, in *book.BookRes) (*book.Res, error) {
	l := logic.NewAlterBookLogic(ctx, s.svcCtx)
	return l.AlterBook(in)
}

func (s *BookServiceServer) AddBook(ctx context.Context, in *book.BookRes) (*book.Res, error) {
	l := logic.NewAddBookLogic(ctx, s.svcCtx)
	return l.AddBook(in)
}

func (s *BookServiceServer) GetBookByName(ctx context.Context, in *book.BookRes) (*book.Books, error) {
	l := logic.NewGetBookByNameLogic(ctx, s.svcCtx)
	return l.GetBookByName(in)
}

func (s *BookServiceServer) GetBookByAuthor(ctx context.Context, in *book.BookRes) (*book.Books, error) {
	l := logic.NewGetBookByAuthorLogic(ctx, s.svcCtx)
	return l.GetBookByAuthor(in)
}

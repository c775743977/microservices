// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userservice

import (
	"context"

	"rpc/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Cookie      = user.Cookie
	LoginReq    = user.LoginReq
	LoginRes    = user.LoginRes
	RegisterReq = user.RegisterReq
	RegisterRes = user.RegisterRes
	RootRes     = user.RootRes
	Session     = user.Session
	UserName    = user.UserName
	UserReq     = user.UserReq
	UserRes     = user.UserRes

	UserService interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error)
		GetSession(ctx context.Context, in *Cookie, opts ...grpc.CallOption) (*Session, error)
		LogOut(ctx context.Context, in *Cookie, opts ...grpc.CallOption) (*Cookie, error)
		GetUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRes, error)
		IsRoot(ctx context.Context, in *Cookie, opts ...grpc.CallOption) (*RootRes, error)
		GetUserByName(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*UserRes, error)
		CreateCart(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserReq, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterRes, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserService) GetSession(ctx context.Context, in *Cookie, opts ...grpc.CallOption) (*Session, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetSession(ctx, in, opts...)
}

func (m *defaultUserService) LogOut(ctx context.Context, in *Cookie, opts ...grpc.CallOption) (*Cookie, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.LogOut(ctx, in, opts...)
}

func (m *defaultUserService) GetUser(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserRes, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUserService) IsRoot(ctx context.Context, in *Cookie, opts ...grpc.CallOption) (*RootRes, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.IsRoot(ctx, in, opts...)
}

func (m *defaultUserService) GetUserByName(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*UserRes, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.GetUserByName(ctx, in, opts...)
}

func (m *defaultUserService) CreateCart(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserReq, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.CreateCart(ctx, in, opts...)
}

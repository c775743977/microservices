// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: cart.proto

package cart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartServiceClient is the client API for CartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartServiceClient interface {
	GetCartByName(ctx context.Context, in *CartReqByName, opts ...grpc.CallOption) (*Cart, error)
	GetCartByUserID(ctx context.Context, in *CartReqByUserID, opts ...grpc.CallOption) (*Cart, error)
	GetCartByID(ctx context.Context, in *CartReqByID, opts ...grpc.CallOption) (*Cart, error)
	GetCartItem(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*CartItem, error)
	CleanCart(ctx context.Context, in *CartReqByUserID, opts ...grpc.CallOption) (*Result, error)
	CleanCartItem(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*Result, error)
	AddToCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*Result, error)
	AlterItem(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*Result, error)
	AddItem(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*Result, error)
	AddItemNum(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*Result, error)
	AlterItemNum(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*Result, error)
	DelItem(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*Result, error)
}

type cartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartServiceClient(cc grpc.ClientConnInterface) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) GetCartByName(ctx context.Context, in *CartReqByName, opts ...grpc.CallOption) (*Cart, error) {
	out := new(Cart)
	err := c.cc.Invoke(ctx, "/cart.CartService/GetCartByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetCartByUserID(ctx context.Context, in *CartReqByUserID, opts ...grpc.CallOption) (*Cart, error) {
	out := new(Cart)
	err := c.cc.Invoke(ctx, "/cart.CartService/GetCartByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetCartByID(ctx context.Context, in *CartReqByID, opts ...grpc.CallOption) (*Cart, error) {
	out := new(Cart)
	err := c.cc.Invoke(ctx, "/cart.CartService/GetCartByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetCartItem(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*CartItem, error) {
	out := new(CartItem)
	err := c.cc.Invoke(ctx, "/cart.CartService/GetCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) CleanCart(ctx context.Context, in *CartReqByUserID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cart.CartService/CleanCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) CleanCartItem(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cart.CartService/CleanCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) AddToCart(ctx context.Context, in *Cart, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cart.CartService/AddToCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) AlterItem(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cart.CartService/AlterItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) AddItem(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cart.CartService/AddItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) AddItemNum(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cart.CartService/AddItemNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) AlterItemNum(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cart.CartService/AlterItemNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) DelItem(ctx context.Context, in *CartItem, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/cart.CartService/DelItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServiceServer is the server API for CartService service.
// All implementations must embed UnimplementedCartServiceServer
// for forward compatibility
type CartServiceServer interface {
	GetCartByName(context.Context, *CartReqByName) (*Cart, error)
	GetCartByUserID(context.Context, *CartReqByUserID) (*Cart, error)
	GetCartByID(context.Context, *CartReqByID) (*Cart, error)
	GetCartItem(context.Context, *CartItem) (*CartItem, error)
	CleanCart(context.Context, *CartReqByUserID) (*Result, error)
	CleanCartItem(context.Context, *CartItem) (*Result, error)
	AddToCart(context.Context, *Cart) (*Result, error)
	AlterItem(context.Context, *CartItem) (*Result, error)
	AddItem(context.Context, *CartItem) (*Result, error)
	AddItemNum(context.Context, *CartItem) (*Result, error)
	AlterItemNum(context.Context, *CartItem) (*Result, error)
	DelItem(context.Context, *CartItem) (*Result, error)
	mustEmbedUnimplementedCartServiceServer()
}

// UnimplementedCartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCartServiceServer struct {
}

func (UnimplementedCartServiceServer) GetCartByName(context.Context, *CartReqByName) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartByName not implemented")
}
func (UnimplementedCartServiceServer) GetCartByUserID(context.Context, *CartReqByUserID) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartByUserID not implemented")
}
func (UnimplementedCartServiceServer) GetCartByID(context.Context, *CartReqByID) (*Cart, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartByID not implemented")
}
func (UnimplementedCartServiceServer) GetCartItem(context.Context, *CartItem) (*CartItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCartItem not implemented")
}
func (UnimplementedCartServiceServer) CleanCart(context.Context, *CartReqByUserID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanCart not implemented")
}
func (UnimplementedCartServiceServer) CleanCartItem(context.Context, *CartItem) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanCartItem not implemented")
}
func (UnimplementedCartServiceServer) AddToCart(context.Context, *Cart) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedCartServiceServer) AlterItem(context.Context, *CartItem) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterItem not implemented")
}
func (UnimplementedCartServiceServer) AddItem(context.Context, *CartItem) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedCartServiceServer) AddItemNum(context.Context, *CartItem) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemNum not implemented")
}
func (UnimplementedCartServiceServer) AlterItemNum(context.Context, *CartItem) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterItemNum not implemented")
}
func (UnimplementedCartServiceServer) DelItem(context.Context, *CartItem) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelItem not implemented")
}
func (UnimplementedCartServiceServer) mustEmbedUnimplementedCartServiceServer() {}

// UnsafeCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServiceServer will
// result in compilation errors.
type UnsafeCartServiceServer interface {
	mustEmbedUnimplementedCartServiceServer()
}

func RegisterCartServiceServer(s grpc.ServiceRegistrar, srv CartServiceServer) {
	s.RegisterService(&CartService_ServiceDesc, srv)
}

func _CartService_GetCartByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartReqByName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCartByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/GetCartByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCartByName(ctx, req.(*CartReqByName))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetCartByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartReqByUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCartByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/GetCartByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCartByUserID(ctx, req.(*CartReqByUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetCartByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartReqByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCartByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/GetCartByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCartByID(ctx, req.(*CartReqByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/GetCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCartItem(ctx, req.(*CartItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_CleanCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartReqByUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).CleanCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/CleanCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).CleanCart(ctx, req.(*CartReqByUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_CleanCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).CleanCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/CleanCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).CleanCartItem(ctx, req.(*CartItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/AddToCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddToCart(ctx, req.(*Cart))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_AlterItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AlterItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/AlterItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AlterItem(ctx, req.(*CartItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/AddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddItem(ctx, req.(*CartItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_AddItemNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddItemNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/AddItemNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddItemNum(ctx, req.(*CartItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_AlterItemNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AlterItemNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/AlterItemNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AlterItemNum(ctx, req.(*CartItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_DelItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).DelItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/DelItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).DelItem(ctx, req.(*CartItem))
	}
	return interceptor(ctx, in, info, handler)
}

// CartService_ServiceDesc is the grpc.ServiceDesc for CartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCartByName",
			Handler:    _CartService_GetCartByName_Handler,
		},
		{
			MethodName: "GetCartByUserID",
			Handler:    _CartService_GetCartByUserID_Handler,
		},
		{
			MethodName: "GetCartByID",
			Handler:    _CartService_GetCartByID_Handler,
		},
		{
			MethodName: "GetCartItem",
			Handler:    _CartService_GetCartItem_Handler,
		},
		{
			MethodName: "CleanCart",
			Handler:    _CartService_CleanCart_Handler,
		},
		{
			MethodName: "CleanCartItem",
			Handler:    _CartService_CleanCartItem_Handler,
		},
		{
			MethodName: "AddToCart",
			Handler:    _CartService_AddToCart_Handler,
		},
		{
			MethodName: "AlterItem",
			Handler:    _CartService_AlterItem_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _CartService_AddItem_Handler,
		},
		{
			MethodName: "AddItemNum",
			Handler:    _CartService_AddItemNum_Handler,
		},
		{
			MethodName: "AlterItemNum",
			Handler:    _CartService_AlterItemNum_Handler,
		},
		{
			MethodName: "DelItem",
			Handler:    _CartService_DelItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart.proto",
}

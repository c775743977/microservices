// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package orderservice

import (
	"context"

	"rpc/types/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AllOrder         = order.AllOrder
	OrderItem        = order.OrderItem
	OrderItemReq     = order.OrderItemReq
	OrderItemRes     = order.OrderItemRes
	OrderReqByID     = order.OrderReqByID
	OrderReqByUserID = order.OrderReqByUserID
	OrderRes         = order.OrderRes

	OrderService interface {
		CreateOrder(ctx context.Context, in *OrderRes, opts ...grpc.CallOption) (*OrderReqByID, error)
		CreateOrderItem(ctx context.Context, in *OrderItem, opts ...grpc.CallOption) (*OrderReqByID, error)
		GetOrderByID(ctx context.Context, in *OrderReqByID, opts ...grpc.CallOption) (*OrderRes, error)
		GetOrderByUserID(ctx context.Context, in *OrderReqByUserID, opts ...grpc.CallOption) (*OrderRes, error)
		GetOrderItem(ctx context.Context, in *OrderItemReq, opts ...grpc.CallOption) (*OrderItemRes, error)
		AlterOrderStatus(ctx context.Context, in *OrderRes, opts ...grpc.CallOption) (*OrderRes, error)
		GetAllOrder(ctx context.Context, in *OrderReqByUserID, opts ...grpc.CallOption) (*AllOrder, error)
		DelOrder(ctx context.Context, in *OrderReqByID, opts ...grpc.CallOption) (*OrderReqByID, error)
	}

	defaultOrderService struct {
		cli zrpc.Client
	}
)

func NewOrderService(cli zrpc.Client) OrderService {
	return &defaultOrderService{
		cli: cli,
	}
}

func (m *defaultOrderService) CreateOrder(ctx context.Context, in *OrderRes, opts ...grpc.CallOption) (*OrderReqByID, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.CreateOrder(ctx, in, opts...)
}

func (m *defaultOrderService) CreateOrderItem(ctx context.Context, in *OrderItem, opts ...grpc.CallOption) (*OrderReqByID, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.CreateOrderItem(ctx, in, opts...)
}

func (m *defaultOrderService) GetOrderByID(ctx context.Context, in *OrderReqByID, opts ...grpc.CallOption) (*OrderRes, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.GetOrderByID(ctx, in, opts...)
}

func (m *defaultOrderService) GetOrderByUserID(ctx context.Context, in *OrderReqByUserID, opts ...grpc.CallOption) (*OrderRes, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.GetOrderByUserID(ctx, in, opts...)
}

func (m *defaultOrderService) GetOrderItem(ctx context.Context, in *OrderItemReq, opts ...grpc.CallOption) (*OrderItemRes, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.GetOrderItem(ctx, in, opts...)
}

func (m *defaultOrderService) AlterOrderStatus(ctx context.Context, in *OrderRes, opts ...grpc.CallOption) (*OrderRes, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.AlterOrderStatus(ctx, in, opts...)
}

func (m *defaultOrderService) GetAllOrder(ctx context.Context, in *OrderReqByUserID, opts ...grpc.CallOption) (*AllOrder, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.GetAllOrder(ctx, in, opts...)
}

func (m *defaultOrderService) DelOrder(ctx context.Context, in *OrderReqByID, opts ...grpc.CallOption) (*OrderReqByID, error) {
	client := order.NewOrderServiceClient(m.cli.Conn())
	return client.DelOrder(ctx, in, opts...)
}

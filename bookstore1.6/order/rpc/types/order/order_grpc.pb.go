// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	CreateOrder(ctx context.Context, in *OrderRes, opts ...grpc.CallOption) (*OrderReqByID, error)
	CreateOrderItem(ctx context.Context, in *OrderItem, opts ...grpc.CallOption) (*OrderReqByID, error)
	GetOrderByID(ctx context.Context, in *OrderReqByID, opts ...grpc.CallOption) (*OrderRes, error)
	GetOrderByUserID(ctx context.Context, in *OrderReqByUserID, opts ...grpc.CallOption) (*OrderRes, error)
	GetOrderItem(ctx context.Context, in *OrderItemReq, opts ...grpc.CallOption) (*OrderItemRes, error)
	AlterOrderStatus(ctx context.Context, in *OrderRes, opts ...grpc.CallOption) (*OrderRes, error)
	GetAllOrder(ctx context.Context, in *OrderReqByUserID, opts ...grpc.CallOption) (*AllOrder, error)
	DelOrder(ctx context.Context, in *OrderReqByID, opts ...grpc.CallOption) (*OrderReqByID, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *OrderRes, opts ...grpc.CallOption) (*OrderReqByID, error) {
	out := new(OrderReqByID)
	err := c.cc.Invoke(ctx, "/order.OrderService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CreateOrderItem(ctx context.Context, in *OrderItem, opts ...grpc.CallOption) (*OrderReqByID, error) {
	out := new(OrderReqByID)
	err := c.cc.Invoke(ctx, "/order.OrderService/CreateOrderItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderByID(ctx context.Context, in *OrderReqByID, opts ...grpc.CallOption) (*OrderRes, error) {
	out := new(OrderRes)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetOrderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderByUserID(ctx context.Context, in *OrderReqByUserID, opts ...grpc.CallOption) (*OrderRes, error) {
	out := new(OrderRes)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetOrderByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrderItem(ctx context.Context, in *OrderItemReq, opts ...grpc.CallOption) (*OrderItemRes, error) {
	out := new(OrderItemRes)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetOrderItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) AlterOrderStatus(ctx context.Context, in *OrderRes, opts ...grpc.CallOption) (*OrderRes, error) {
	out := new(OrderRes)
	err := c.cc.Invoke(ctx, "/order.OrderService/AlterOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetAllOrder(ctx context.Context, in *OrderReqByUserID, opts ...grpc.CallOption) (*AllOrder, error) {
	out := new(AllOrder)
	err := c.cc.Invoke(ctx, "/order.OrderService/GetAllOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) DelOrder(ctx context.Context, in *OrderReqByID, opts ...grpc.CallOption) (*OrderReqByID, error) {
	out := new(OrderReqByID)
	err := c.cc.Invoke(ctx, "/order.OrderService/DelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	CreateOrder(context.Context, *OrderRes) (*OrderReqByID, error)
	CreateOrderItem(context.Context, *OrderItem) (*OrderReqByID, error)
	GetOrderByID(context.Context, *OrderReqByID) (*OrderRes, error)
	GetOrderByUserID(context.Context, *OrderReqByUserID) (*OrderRes, error)
	GetOrderItem(context.Context, *OrderItemReq) (*OrderItemRes, error)
	AlterOrderStatus(context.Context, *OrderRes) (*OrderRes, error)
	GetAllOrder(context.Context, *OrderReqByUserID) (*AllOrder, error)
	DelOrder(context.Context, *OrderReqByID) (*OrderReqByID, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) CreateOrder(context.Context, *OrderRes) (*OrderReqByID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServiceServer) CreateOrderItem(context.Context, *OrderItem) (*OrderReqByID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderItem not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderByID(context.Context, *OrderReqByID) (*OrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByID not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderByUserID(context.Context, *OrderReqByUserID) (*OrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByUserID not implemented")
}
func (UnimplementedOrderServiceServer) GetOrderItem(context.Context, *OrderItemReq) (*OrderItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderItem not implemented")
}
func (UnimplementedOrderServiceServer) AlterOrderStatus(context.Context, *OrderRes) (*OrderRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterOrderStatus not implemented")
}
func (UnimplementedOrderServiceServer) GetAllOrder(context.Context, *OrderReqByUserID) (*AllOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrder not implemented")
}
func (UnimplementedOrderServiceServer) DelOrder(context.Context, *OrderReqByID) (*OrderReqByID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelOrder not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*OrderRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CreateOrderItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrderItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/CreateOrderItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrderItem(ctx, req.(*OrderItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReqByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetOrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderByID(ctx, req.(*OrderReqByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReqByUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetOrderByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderByUserID(ctx, req.(*OrderReqByUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrderItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrderItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetOrderItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrderItem(ctx, req.(*OrderItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_AlterOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AlterOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/AlterOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AlterOrderStatus(ctx, req.(*OrderRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetAllOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReqByUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetAllOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetAllOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetAllOrder(ctx, req.(*OrderReqByUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_DelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReqByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).DelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/DelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).DelOrder(ctx, req.(*OrderReqByID))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "CreateOrderItem",
			Handler:    _OrderService_CreateOrderItem_Handler,
		},
		{
			MethodName: "GetOrderByID",
			Handler:    _OrderService_GetOrderByID_Handler,
		},
		{
			MethodName: "GetOrderByUserID",
			Handler:    _OrderService_GetOrderByUserID_Handler,
		},
		{
			MethodName: "GetOrderItem",
			Handler:    _OrderService_GetOrderItem_Handler,
		},
		{
			MethodName: "AlterOrderStatus",
			Handler:    _OrderService_AlterOrderStatus_Handler,
		},
		{
			MethodName: "GetAllOrder",
			Handler:    _OrderService_GetAllOrder_Handler,
		},
		{
			MethodName: "DelOrder",
			Handler:    _OrderService_DelOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}
